<?php
namespace LSM;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface LSMServiceIf {
  public function breakerClearRequestLimit(\LSM\TokenParam $token, $method);
  public function breakerClearIpLimit(\LSM\TokenParam $token, $method);
}

class LSMServiceClient implements \LSM\LSMServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function breakerClearRequestLimit(\LSM\TokenParam $token, $method)
  {
    $this->send_breakerClearRequestLimit($token, $method);
    $this->recv_breakerClearRequestLimit();
  }

  public function send_breakerClearRequestLimit(\LSM\TokenParam $token, $method)
  {
    $args = new \LSM\LSMService_breakerClearRequestLimit_args();
    $args->token = $token;
    $args->method = $method;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'breakerClearRequestLimit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('breakerClearRequestLimit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_breakerClearRequestLimit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\LSM\LSMService_breakerClearRequestLimit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \LSM\LSMService_breakerClearRequestLimit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->tokenerr !== null) {
      throw $result->tokenerr;
    }
    return;
  }

  public function breakerClearIpLimit(\LSM\TokenParam $token, $method)
  {
    $this->send_breakerClearIpLimit($token, $method);
    $this->recv_breakerClearIpLimit();
  }

  public function send_breakerClearIpLimit(\LSM\TokenParam $token, $method)
  {
    $args = new \LSM\LSMService_breakerClearIpLimit_args();
    $args->token = $token;
    $args->method = $method;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'breakerClearIpLimit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('breakerClearIpLimit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_breakerClearIpLimit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\LSM\LSMService_breakerClearIpLimit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \LSM\LSMService_breakerClearIpLimit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->tokenerr !== null) {
      throw $result->tokenerr;
    }
    return;
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class LSMService_breakerClearRequestLimit_args {
  static $_TSPEC;

  public $token = null;
  public $method = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\LSM\TokenParam',
          ),
        2 => array(
          'var' => 'method',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['method'])) {
        $this->method = $vals['method'];
      }
    }
  }

  public function getName() {
    return 'LSMService_breakerClearRequestLimit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->token = new \LSM\TokenParam();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->method);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LSMService_breakerClearRequestLimit_args');
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 1);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->method !== null) {
      $xfer += $output->writeFieldBegin('method', TType::STRING, 2);
      $xfer += $output->writeString($this->method);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LSMService_breakerClearRequestLimit_result {
  static $_TSPEC;

  public $tokenerr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tokenerr',
          'type' => TType::STRUCT,
          'class' => '\LSM\TokenException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tokenerr'])) {
        $this->tokenerr = $vals['tokenerr'];
      }
    }
  }

  public function getName() {
    return 'LSMService_breakerClearRequestLimit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->tokenerr = new \LSM\TokenException();
            $xfer += $this->tokenerr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LSMService_breakerClearRequestLimit_result');
    if ($this->tokenerr !== null) {
      $xfer += $output->writeFieldBegin('tokenerr', TType::STRUCT, 1);
      $xfer += $this->tokenerr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LSMService_breakerClearIpLimit_args {
  static $_TSPEC;

  public $token = null;
  public $method = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\LSM\TokenParam',
          ),
        2 => array(
          'var' => 'method',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['method'])) {
        $this->method = $vals['method'];
      }
    }
  }

  public function getName() {
    return 'LSMService_breakerClearIpLimit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->token = new \LSM\TokenParam();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->method);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LSMService_breakerClearIpLimit_args');
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 1);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->method !== null) {
      $xfer += $output->writeFieldBegin('method', TType::STRING, 2);
      $xfer += $output->writeString($this->method);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LSMService_breakerClearIpLimit_result {
  static $_TSPEC;

  public $tokenerr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tokenerr',
          'type' => TType::STRUCT,
          'class' => '\LSM\TokenException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tokenerr'])) {
        $this->tokenerr = $vals['tokenerr'];
      }
    }
  }

  public function getName() {
    return 'LSMService_breakerClearIpLimit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->tokenerr = new \LSM\TokenException();
            $xfer += $this->tokenerr->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LSMService_breakerClearIpLimit_result');
    if ($this->tokenerr !== null) {
      $xfer += $output->writeFieldBegin('tokenerr', TType::STRUCT, 1);
      $xfer += $this->tokenerr->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LSMServiceProcessor {
  protected $handler_ = null;
  public function __construct($handler) {
    $this->handler_ = $handler;
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_breakerClearRequestLimit($seqid, $input, $output) {
    $args = new \LSM\LSMService_breakerClearRequestLimit_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \LSM\LSMService_breakerClearRequestLimit_result();
    try {
      $this->handler_->breakerClearRequestLimit($args->token, $args->method);
    } catch (\LSM\TokenException $tokenerr) {
      $result->tokenerr = $tokenerr;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'breakerClearRequestLimit', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('breakerClearRequestLimit', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_breakerClearIpLimit($seqid, $input, $output) {
    $args = new \LSM\LSMService_breakerClearIpLimit_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \LSM\LSMService_breakerClearIpLimit_result();
    try {
      $this->handler_->breakerClearIpLimit($args->token, $args->method);
    } catch (\LSM\TokenException $tokenerr) {
      $result->tokenerr = $tokenerr;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'breakerClearIpLimit', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('breakerClearIpLimit', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
}

